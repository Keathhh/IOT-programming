from flask import Flask, render_template
import mysql.connector
import serial
from notify_run import Notify
import threading
import subprocess

app = Flask(__name__)

pins = {
    11: {'name': 'Green LED', 'state': 0},
    12: {'name': 'Red LED', 'state': 0},
    'A0': {'name': 'Smoke Sensor', 'state': 0},
    10: {'name': 'Buzzer', 'state': 0}
}

db_conn = mysql.connector.connect(host='localhost', user='root', password='cutie123', database='fire_db')
cursor = db_conn.cursor()

notify = Notify(endpoint='https://notify.run/c/FJuUO8XX8dyd8UzRKKCF/')

@app.route('/')
def index():
    # Fetch fire logs from the database
    cursor.execute("SELECT * FROM fire_logs")
    fire_logs = cursor.fetchall()
    
    # Prepare HTML to display fire logs
    fire_logs_html = "<h1>Fire Logs</h1>"
    fire_logs_html += "<ul>"
    for log in fire_logs:
        fire_logs_html += f"<li>{log[1]}</li>" 
    fire_logs_html += "</ul>"

    templateData = {
        'pins': pins,
        'fire_logs': fire_logs_html
    }
    return render_template('index.html', **templateData)

@app.route("/<changePin>/<toggle>")
def toggle_function(changePin, toggle):
    changePin = int(changePin)
    deviceName = pins[changePin]['name']
    ser = serial.Serial('/dev/cu.usbmodem1101', 9600, timeout=1)
    ser.flush()

    if toggle == "on":
        ser.write(str(changePin).encode())
        pins[changePin]['state'] = 1
        message = "Turned " + deviceName + " on."
    elif toggle == "off":
        ser.write(str(changePin + 10).encode())
        pins[changePin]['state'] = 0
        message = "Turned " + deviceName + " off."

    templateData = {
        'pins': pins
    }
    return render_template('index.html', **templateData)

@app.route('/fire-alert', methods=['POST'])
def fire_alert():
    # Handle the incoming alert
    # You can perform any necessary actions here, such as sending notifications
    print("Fire alert received!")
    return "Fire alert received!", 200

def read_arduino_data():
    notify = Notify()
    device = '/dev/cu.usbmodem1101'

    # Update the port path with the correct one for your Arduino
    ser = serial.Serial(device, 9600, timeout=1)  # Set timeout to 1 second

    try:
        while True:
            # Read data from Arduino until timeout
            data = ser.readline().decode().strip()  # Read one line of data
            if data:
                print(data)

            if "fire" in data.lower():
                print("Fire detected! Sending Alerts!")
                subprocess.run(["curl", "https://notify.run/FJuUO8XX8dyd8UzRKKCF", "-d", "Fire Detected! Take action immediately."])

    except KeyboardInterrupt:
        print("Stopping data acquisition.")

    finally:
        # Close serial connection
        ser.close()

if __name__ == '__main__':
    # Start Flask app without the reloader
    flask_thread = threading.Thread(target=app.run, kwargs={'debug': True, 'host': '0.0.0.0', 'port': 8080, 'use_reloader': False})
    flask_thread.start()

    # Start Arduino data reading loop in the main thread
    read_arduino_data()


